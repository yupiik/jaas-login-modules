[{"lang":"en","text":"","title":"Index","url":"http://localhost:4200/index.html"},{"lang":"en","lvl2":"BaseLoginModule\nMatchingPrincipalLoginModule\nInterpolatingSinglePrincipalLoginModule\nConditionalDelegatingLoginModule","text":"This is an abstract class enabling to simplify the coding of a login module.\nUsage:\nPrincipals have access to the options/configuration of the login module through parameters.options.\nThis is another abstract class which reads options to find matchers and will call computePrincipals() method only if it matches, else the login module is ignored.\nit is a matcher which is intended to be placed after another LoginModule since it will test existing Principal - computed by previous LoginModules to create its own ones.\nthe matching happens in commit hook and not login to ensure we can access subject principals.\nHere are the matcher configuration - to set through LoginModule configuration:\nName\nDescription\nDefault\nmatcher.allRequired\nBoolean requiring that all matchers match, if false a single matching is sufficient to enable the login module principal computation.\nfalse\nmatcher.singleMatchingPrincipal\nBoolean requiring that a single principal was matched thanks matchers (isNumber, regex, â€¦).\nmatcher.hasName\nAn exact string which will be tested against principal names (faster than regex).\n-\nmatcher.regex\nJava Pattern/regex at least one Principal of the current Subject should match - it means at least one of the previous LoginModules should have created a matching principal name.\nmatcher.startsWith\nA prefix a principal should have (faster than regex).\nmatcher.endsWith\nmatcher.isNumber\nOptimized flavor of the pattern matching for principals which should be numbers.\nmatcher.count\nMatches if the subject principal count is equal to the provided value\nmatcher.isNumber.min\nFor matcher.isNumber rule, the minimum accepted number\nmatcher.isNumber.max\nFor matcher.isNumber rule, the maximum accepted number\nInterpolatingSinglePrincipalLoginModule is a MatchingPrincipalLoginModule which expects a single matching principal. In such a case, it will use its rule to compute another principal from the matching one.\nCommon example is to deduce a group principal from the user name.\nit is a matching login module where singleMatchingPrincipal is forced to be true.\nFor example if only the-user is matching, then you can create with this login module the principal group-the-user.\nIts configuration is:\ninterpolation.pattern\nThe principal value in case of matching, it can use {name} as a placeholder for the matching principal name.\ninterpolation.principal.type\nClass name of the principal if custom (SimplePrincipal is used otherwise)\nSample usage:\nThis login module intent is to use a login module configured with delegate.class option and only instantiated in commit phase when a matching (inherited from MatchingPrincipalLoginModule) is done.","title":"Login Modules","url":"http://localhost:4200/login-modules.html"}]