[{"lang":"en","text":"","title":"Index","url":"//www.yupiik.io/jaas-login-modules/index.html"},{"lang":"en","lvl2":"Maven Usage\nBaseLoginModule\nMatchingPrincipalLoginModule\nInterpolatingSinglePrincipalLoginModule\nConditionalDelegatingLoginModule\nTypedPrincipalLoginModule","text":"\nto see sample configurations, read gallery samples page.\nTo add jaas-login-modules to your project, use the following dependency:\nyou can select the version you want for yupiik-loginmodules.version at https://repo.maven.apache.org/maven2/io/yupiik/jaas/jaas-login-modules/ or check it at the top of this page.\nThis is an abstract class enabling to simplify the coding of a login module.\nUsage:\nPrincipals have access to the options/configuration of the login module through parameters.options.\nThis is another abstract class which reads options to find matchers and will call computePrincipals() method only if it matches, else the login module is ignored.\nit is a matcher which is intended to be placed after another LoginModule since it will test existing Principal - computed by previous LoginModules to create its own ones.\nthe matching happens in commit hook and not login to ensure we can access subject principals.\nHere are the matcher configuration - to set through LoginModule configuration:\nName\nDescription\nDefault\nmatcher.allRequired\nBoolean requiring that all matchers match, if false a single matching is sufficient to enable the login module principal computation.\nfalse\nmatcher.singleMatchingPrincipal\nBoolean requiring that a single principal was matched thanks matchers (isNumber, regex, …).\nmatcher.hasName\nAn exact string which will be tested against principal names (faster than regex).\n-\nmatcher.regex\nJava Pattern/regex at least one Principal of the current Subject should match - it means at least one of the previous LoginModules should have created a matching principal name.\nmatcher.startsWith\nA prefix a principal should have (faster than regex).\nmatcher.endsWith\nmatcher.isNumber\nOptimized flavor of the pattern matching for principals which should be numbers.\nmatcher.count\nMatches if the subject principal count is equal to the provided value\nmatcher.isNumber.min\nFor matcher.isNumber rule, the minimum accepted number\nmatcher.isNumber.max\nFor matcher.isNumber rule, the maximum accepted number\nInterpolatingSinglePrincipalLoginModule is a MatchingPrincipalLoginModule which expects a single matching principal. In such a case, it will use its rule to compute another principal from the matching one.\nCommon example is to deduce a group principal from the user name.\nit is a matching login module where singleMatchingPrincipal is forced to be true.\nFor example if only the-user is matching, then you can create with this login module the principal group-the-user.\nIts configuration is:\ninterpolation.pattern\nThe principal value in case of matching, it can use {name} as a placeholder for the matching principal name.\ninterpolation.principal.type\nClass name of the principal if custom (SimplePrincipal is used otherwise)\nSample usage:\nThis login module intent is to use a login module configured with delegate.class option and only instantiated in commit phase when a matching (inherited from MatchingPrincipalLoginModule) is done.\nThe sole purpose of this login module is to use another principal type for all principals computed by the underlying login module:\ndelegate.class\nThe login module type to delegate to (class name).\ndelegate.configuration.xxx\nAny configuration element of the delegate.class login module (prefix delegate.configuraton. is removed).\nClass name of the principal.\nremoveWrapped\nBy default the wrapped principals are replaced but setting it to false will ust add the wrappers keeping original principals, this enables to keep the additional metadata if relevant by casting the principal.\nThis configuration will use org.apache.activemq.jaas.GroupPrincipal for all principals added by MyLoginModuleCreatingAFooPrincipal in commit phase.","title":"Login Modules","url":"//www.yupiik.io/jaas-login-modules/login-modules.html"},{"lang":"en","lvl2":"ActiveMQ\nTomEE","lvl3":"LDAP authentication with computed group","text":"This page lists some common configuration samples. All the provided configuration is intended to belong to a JAAS configuration file. As a quick reminder, this configuration is defined by java.security.auth.login.config system property (by default) on the JVM. For example: -Djava.security.auth.login.config=/path/to/my/jaas.config.\nThis section targets an activemq server/broker. It is primarly intended to work with JAASAuthenticationPlugin to load the user security context.\nLDAP ActiveMQ login module will authenticate the user validating its credentials (username/password pair). This phase is marked as requisite which means it is required and in case of failure other phases - login modules - are ignored.\nHow to bind the user to validate its username/password pair,\nDisable group loading from LDAP (no roleName means skips but roleBase and roleSearchMatching are required configuration),\nAdd an interpolating login module which will deduce a group from the principal computed by ActiveMQ LDAP Login Module,\nEnsure the ActiveMQ username matches the rules configured (here that the username is a number but it could be a regex too, see reference documentation for more information),\nCompute the group name with group_<name> pattern,\nInstantiate the principal with ActiveMQ group principal type (optional).\nNote that a variant of this configuration which would be a bit faster thanks LDAP connection pooling would use the Sun native login module - but the principal will not be an ActiveMQ UserPrincipal but a sun one - shouldn’t impact the runtime:\nTo fully use ActiveMQ principal types, you can wrap the first login module in a TypedPrincipalLoginModule:\nMain issue with TomEE is to provide to the server the principal which is the username (to work with all EE components when a principal must be injected or alike). There are multiple strategies but one is to mark the principal with org.apache.openejb.spi.CallerPrincipal which is not always possible, in particular when a login module already exists. To solve that case, we can reuse TomEE org.apache.openejb.core.security.jaas.UserPrincipal and simply wrap the underlying principal with TypedPrincipalLoginModule:","title":"Samples","url":"//www.yupiik.io/jaas-login-modules/sample-gallery.html"}]